/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PARSE_FASTQ_INPUT:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

/*
========================================================================================
    GENOME PREPARATION
========================================================================================
*/

if(params.run_genome_prep) {
    process {
        withName: '.*PREPARE_GENOME:GUNZIP_.*' {
            publishDir = [
                enabled: false
            ]
        }

         withName: '.*PREPARE_GENOME:UNTAR_.*' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:BOWTIE_BUILD' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:STAR_GENOMEGENERATE' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:TARGET_INDEX' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:SMRNA_INDEX' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:REMOVE_GTF_BRACKETS' {
            ext.cmd1 = "sed 's/)/_/g' | sed 's/(/_/g'"
            ext.ext = 'gtf'
            ext.suffix = '_brcktsrmv'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:TARGET_CHROM_SIZE' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:SMRNA_CHROM_SIZE' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:FIND_LONGEST_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:CLIPSEQ_FILTER_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:ICOUNT_SEG_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:ICOUNT_SEG_FILTGTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED_GENIC_OTHER' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED_GENIC_OTHER_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

/*
========================================================================================
    PRE-PROCESSING
========================================================================================
*/

if(params.run_move_umi_to_header) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PARSE_FASTQ_INPUT:CAT_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/01_prealign" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:UMITOOLS_EXTRACT' {
            ext.args   = { "--bc-pattern=${params.umi_pattern} --extract-method=string" }
            publishDir = [
                path: { "${params.outdir}/01_prealign" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }
}
