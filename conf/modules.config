/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PARSE_FASTQ_INPUT:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

/*
========================================================================================
    GENOME PREPARATION
========================================================================================
*/

if(params.run_genome_prep) {
    process {
        withName: '.*PREPARE_GENOME:GUNZIP_.*' {
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*PREPARE_GENOME:UNTAR_.*' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:BOWTIE_BUILD' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:STAR_GENOMEGENERATE' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:TARGET_INDEX' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:NCRNA_INDEX' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:REMOVE_GTF_BRACKETS' {
            ext.cmd1 = "sed 's/)/_/g' | sed 's/(/_/g'"
            ext.ext = 'gtf'
            ext.suffix = '_brcktsrmv'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:TARGET_CHROM_SIZE' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:NCRNA_CHROM_SIZE' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:FIND_LONGEST_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:CLIPSEQ_FILTER_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:ICOUNT_SEG_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:ICOUNT_SEG_FILTGTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED_GENIC_OTHER' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED_GENIC_OTHER_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

/*
========================================================================================
    PRE-PROCESSING
========================================================================================
*/

process {
    withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PARSE_FASTQ_INPUT:CAT_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/01_prealign" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

if(params.run_preprocessing && !params.skip_fastqc) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
            publishDir = [
                path: { "${params.outdir}/01_prealign/fastqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if(params.run_preprocessing && !params.skip_umi_extract) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
            ext.args   = [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                    params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                    params.umitools_umi_separator  ? "--umi-separator='${params.umitools_umi_separator}'" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/01_prealign/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/01_prealign/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    enabled: params.save_umi_intermeds
                ]
            ]
        }
    }
}

if(params.run_preprocessing && !params.skip_trimming) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
            ext.args   = {
                [
                    "--fastqc_args '-t ${task.cpus}'",
                    params.extra_trimgalore_args ? params.extra_trimgalore_args.split("\\s(?=--)") : ''
                ].flatten().unique(false).join(' ').trim()
            }
            publishDir = [
                [
                    path: { "${params.outdir}/01_prealign/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimmed" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimmed" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

/*
========================================================================================
    ALIGNMENT
========================================================================================
*/

if(params.run_alignment) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:RNA_ALIGN:BOWTIE_ALIGN' {
            ext.args = { "${params.bowtie_params}" }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/ncrna" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.out'
                ],
                [
                    path: { "${params.outdir}/02_alignment/ncrna" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: false
                ],
                [
                    path: { "${params.outdir}/02_alignment/ncrna/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned_output
                ]
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:RNA_ALIGN:BAM_SORT_STATS_SAMTOOLS_NCRNA:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/ncrna" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:RNA_ALIGN:BAM_SORT_STATS_SAMTOOLS_NCRNA:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/ncrna" },
                mode: params.publish_dir_mode,
                pattern: "*.{bai,csi}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:RNA_ALIGN:BAM_SORT_STATS_SAMTOOLS_NCRNA:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/ncrna/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:RNA_ALIGN:STAR_ALIGN' {
            ext.args   = { "--readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM ${params.star_params}" }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/target/log" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.Log.*'
                ],
                [
                    path: { "${params.outdir}/02_alignment/target" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*Aligned.sortedByCoord.out.bam',
                    enabled: params.save_align_intermed
                ],
                [
                    path: { "${params.outdir}/02_alignment/target/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned_output
                ]
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:RNA_ALIGN:SAMTOOLS_INDEX_COORD' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: params.publish_dir_mode,
                pattern: "*.{bai,csi}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:RNA_ALIGN:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/target/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:RNA_ALIGN:SAMTOOLS_SORT_TRANS' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:RNA_ALIGN:SAMTOOLS_INDEX_TRANS' {
            publishDir = [
                enabled: false
            ]
        }
    }
}

/*
========================================================================================
    FILTERING
========================================================================================
*/

if(params.run_filtering) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:FILTER_TRANSCRIPTS' {
            ext.args   = '-h'
            ext.prefix = { "${meta.id}.transcript.filt" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:SAMTOOLS_SORT_FILT_TRANSCRIPT' {
            ext.prefix = { "${meta.id}.transcript.filt.sorted" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermed
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:SAMTOOLS_INDEX_FILT_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermed
            ]
        }
    }
}

/*
========================================================================================
    DEDUPLICATION
========================================================================================
*/

if(params.run_dedup) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:TARGET_DEDUP:UMICOLLAPSE' {
            ext.args = { "--umi-sep ${params.umitools_umi_separator}" }
            ext.prefix = { "${meta.id}.target.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:TARGET_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:TARGET_DEDUP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.target.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:TRANS_DEDUP:UMICOLLAPSE' {
            ext.args = { "--umi-sep ${params.umitools_umi_separator}" }
            ext.prefix = { "${meta.id}.transcript.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:TRANS_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:TRANS_DEDUP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.transcript.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }
    }
}

/*
========================================================================================
    CROSSLINKING
========================================================================================
*/

if(params.run_crosslinking) {
    process {
        withName: '.*CROSSLINKS:BEDTOOLS_BAMTOBED' {
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*CROSSLINKS:BEDTOOLS_GENOMECOV_POS' {
            ext.args = '-dz -strand + -5'
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*CROSSLINKS:BEDTOOLS_GENOMECOV_NEG' {
            ext.args = '-dz -strand - -5'
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*CROSSLINKS:SELECT_BED_POS' {
            ext.cmd1 = 'awk \'{OFS="\\t"}{print \$1, \$2, \$2+1, ".", \$3, "+"}\''
            ext.suffix = '.pos'
            ext.ext = 'bed'
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*CROSSLINKS:SELECT_BED_NEG' {
            ext.cmd1 = 'awk \'{OFS="\\t"}{print \$1, \$2, \$2+1, ".", \$3, "-"}\''
            ext.suffix = '.neg'
            ext.ext = 'bed'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CALC_GENOME_CROSSLINKS:BEDTOOLS_SHIFT' {
            ext.prefix = { "${meta.id}.genome.xl" }
            ext.args = '-m 1 -p -1'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CALC_TRANSCRIPT_CROSSLINKS:BEDTOOLS_SHIFT' {
            ext.prefix = { "${meta.id}.transcript.xl" }
            ext.args = '-m 1 -p -1'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CALC_GENOME_CROSSLINKS:MERGE_AND_SORT' {
            ext.cmd1 = 'sort -k1,1 -k2,2n'
            ext.suffix = '.genome'
            ext.ext = 'bed'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CALC_GENOME_CROSSLINKS:CROSSLINK_COVERAGE' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
            ext.suffix = '.genome'
            ext.ext = 'bedgraph'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CALC_GENOME_CROSSLINKS:CROSSLINK_NORMCOVERAGE' {
            ext.cmd1 = """
            awk -v total=\$CMD2 \'{printf "%s\\t%i\\t%i\\t%s\\t%f\\t%s\\n", \$1, \$2, \$3, \$4, 1000000*\$5/total, \$6}\' |
            awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' |
            sort -k1,1 -k2,2n
            """
            ext.cmd2 = 'awk \'BEGIN {total=0} {total=total+\$5} END {print total}\''
            ext.suffix = '.norm.genome'
            ext.ext = 'bedgraph'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:ICOUNTMINI_SUMMARY' {
            publishDir = [
                path: { "${params.outdir}/04_crosslinks/icountmini_summaries" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:ICOUNTMINI_METAGENE' {
            publishDir = [
                path: { "${params.outdir}/04_crosslinks/icountmini_metagene" },
                mode: "${params.publish_dir_mode}",
               saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CALC_TRANSCRIPT_CROSSLINKS:MERGE_AND_SORT' {
            ext.cmd1 = 'sort -k1,1 -k2,2n'
            ext.suffix = '.transcript'
            ext.ext = 'bed'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CALC_TRANSCRIPT_CROSSLINKS:CROSSLINK_COVERAGE' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
            ext.suffix = '.transcript'
            ext.ext = 'bedgraph'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CALC_TRANSCRIPT_CROSSLINKS:CROSSLINK_NORMCOVERAGE' {
            ext.cmd1 = """
            awk -v total=\$CMD2 \'{printf "%s\\t%i\\t%i\\t%s\\t%f\\t%s\\n", \$1, \$2, \$3, \$4, 1000000*\$5/total, \$6}\' |
            awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' |
            sort -k1,1 -k2,2n
            """
            ext.cmd2 = 'awk \'BEGIN {total=0} {total=total+\$5} END {print total}\''
            ext.suffix = '.norm.transcript'
            ext.ext = 'bedgraph'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/*
========================================================================================
    PEAK CALLING
========================================================================================
*/

if(params.run_peakcalling && params.peakcaller.contains('clippy')) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CLIPPY_GENOME' {
            ext.args = { "${params.clippy_params}" }
            ext.prefix = { "${meta.id}.genome.peaks" }
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/clippy" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:CLIPPY_TRANSCRIPTOME' {
            ext.args = { "${params.clippy_params}" }
            ext.prefix = { "${meta.id}.transcriptome.peaks" }
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/clippy" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if(params.run_peakcalling && params.peakcaller.contains('clippy') && params.run_peka) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PEKA_CLIPPY' {
            ext.args = { "${params.peka_params}" }
            ext.prefix = { "${meta.id}.transcriptome.peaks" }
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/clippy/peka" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if(params.run_peakcalling && params.peakcaller.contains('icount')) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:ICOUNTMINI_SIGXLS' {
            ext.args = { "${params.icount_sigxl_params}" }
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:ICOUNTMINI_PEAKS' {
            ext.args = { "${params.icount_peaks_params}" }
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:GUNZIP_ICOUNTMINI_SIGXLS' {
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/icountmini" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:GUNZIP_ICOUNTMINI_PEAKS' {
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/icountmini" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if(params.run_peakcalling && params.peakcaller.contains('icount') && params.run_peka) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PEKA_ICOUNT' {
            ext.args = { "${params.peka_params}" }
            ext.prefix = { "${meta.id}.transcriptome.peaks" }
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/icountmini/peka" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if(params.run_peakcalling && params.peakcaller.contains('paraclu')) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PARACLU_GENOME' {
            ext.args = { "${params.paraclu_minValue}" }
            ext.prefix = { "${meta.id}.genome.peaks" }
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/paraclu" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PARACLU_TRANSCRIPTOME' {
            ext.args = { "${params.paraclu_minValue}" }
            ext.prefix = { "${meta.id}.transcriptome.peaks" }
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/paraclu" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if(params.run_peakcalling && params.peakcaller.contains('paraclu') && params.run_peka) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PEKA_PARACLU' {
            ext.args = { "${params.peka_params}" }
            ext.prefix = { "${meta.id}.transcriptome.peaks" }
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/paraclu/peka" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if(params.run_peakcalling && params.peakcaller.contains('pureclip')) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PURECLIP' {
            ext.args = { "${params.pureclip_params}" }
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/pureclip" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if(params.run_peakcalling && params.peakcaller.contains('pureclip') && params.run_peka) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PEKA_PURECLIP' {
            ext.args = { "${params.peka_params}" }
            publishDir = [
                path: { "${params.outdir}/05_peakcalling/pureclip/peka" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}


/*
========================================================================================
    REPORTING
========================================================================================
*/

if(params.run_reporting) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:DUMP_SOFTWARE_VERSIONS' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: "${params.publish_dir_mode}",
                pattern: '*_versions.yml'
            ]
        }

        // withName: 'CLIPSEQ:CLIPSEQ_CLIPQC' {
        //     publishDir = [
        //         path: { "${params.outdir}/06_reports/clipqc" },
        //         mode: "${params.publish_dir_mode}",
        //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        //     ]
        // }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:MULTIQC' {
            ext.args   = params.multiqc_title ? "-v --title \"$params.multiqc_title\"" : '-v'
            publishDir = [
                path: { "${params.outdir}/06_reports/multiqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
