/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PARSE_FASTQ_INPUT:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

/*
========================================================================================
    GENOME PREPARATION
========================================================================================
*/

if(params.run_genome_prep) {
    process {
        withName: '.*PREPARE_GENOME:GUNZIP_.*' {
            publishDir = [
                enabled: false
            ]
        }

         withName: '.*PREPARE_GENOME:UNTAR_.*' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:BOWTIE_BUILD' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:STAR_GENOMEGENERATE' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:TARGET_INDEX' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:SMRNA_INDEX' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:REMOVE_GTF_BRACKETS' {
            ext.cmd1 = "sed 's/)/_/g' | sed 's/(/_/g'"
            ext.ext = 'gtf'
            ext.suffix = '_brcktsrmv'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:TARGET_CHROM_SIZE' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:SMRNA_CHROM_SIZE' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:FIND_LONGEST_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:CLIPSEQ_FILTER_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:ICOUNT_SEG_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:ICOUNT_SEG_FILTGTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED_GENIC_OTHER' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PREPARE_GENOME:RESOLVE_UNANNOTATED_GENIC_OTHER_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

/*
========================================================================================
    PRE-PROCESSING
========================================================================================
*/

if(params.run_preprocessing) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:PARSE_FASTQ_INPUT:CAT_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/01_prealign" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }
}

if(params.run_preprocessing && !params.skip_fastqc) {
    process {
        withName: 'NFCORE_CLIPSEQ:CLIPSEQ:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
            publishDir = [
                path: { "${params.outdir}/01_prealign/fastqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if(params.run_preprocessing && !params.skip_umi_extract) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
            ext.args   = [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                    params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                    params.umitools_umi_separator  ? "--umi-separator='${params.umitools_umi_separator}'" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/01_prealign/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/01_prealign/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    enabled: params.save_umi_intermeds
                ]
            ]
        }
    }
}

if(params.run_preprocessing && !params.skip_trimming) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
            ext.args   = {
                [
                    "--fastqc_args '-t ${task.cpus}'",
                    params.extra_trimgalore_args ? params.extra_trimgalore_args.split("\\s(?=--)") : ''
                ].flatten().unique(false).join(' ').trim()
            }
            publishDir = [
                [
                    path: { "${params.outdir}/01_prealign/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimmed" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimmed" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

