nextflow_pipeline {
    name "only_peakcalling"
    script "main.nf"

    test("only_peakcalling_primary") {
        tag "only_peakcalling_primary"
        tag "test"
        when {
            params {
                outdir = "$outputDir"
                only_peakcalling = true
            }
        }

        then {
            assert workflow.success

            // clippy
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists()
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists()
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists()
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists()
            // icount
            assert new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.sigxls.bed").exists()
            assert new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.peaks.bed").exists()
            // paraclu
            assert new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.genome.peaks.clustered.simplified.bed").exists()
            assert new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.transcriptome.peaks.clustered.simplified.bed").exists()
            // pureclip
            assert new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_crosslinks.bed").exists()
            assert new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_peaks.bed").exists()
        }
    }

    test("only_peakcalling_caller_param_fail") {
        tag "only_peakcalling_caller_param_fail"
        tag "test"
        when {
            params {
                outdir = "$outputDir"
                only_input = true
                peakcaller = 'test'
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.trace.succeeded().size() == 0
            assert workflow.trace.failed().size() == 0
        }
    }

    test("only_peakcalling_clippy") {
        tag "only_peakcalling_clippy"
        tag "test"
        when {
            params {
                outdir = "$outputDir"
                only_peakcalling = true
                peakcaller = 'clippy'
            }
        }

        then {
            assert workflow.success

            // clippy
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists()
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists()
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists()
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists()
            // icount
            assert !(new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.sigxls.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.peaks.bed").exists())
            // paraclu
            assert !(new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.genome.peaks.clustered.simplified.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.transcriptome.peaks.clustered.simplified.bed").exists())
            // pureclip
            assert !(new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_crosslinks.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_peaks.bed").exists())
        }
    }

    test("only_peakcalling_icount") {
        tag "only_peakcalling_icount"
        tag "test"
        when {
            params {
                outdir = "$outputDir"
                only_peakcalling = true
                peakcaller = 'icount'
            }
        }

        then {
            assert workflow.success

            // clippy
            assert !(new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists())
            // icount
            assert new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.sigxls.bed").exists()
            assert new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.peaks.bed").exists()
            // paraclu
            assert !(new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.genome.peaks.clustered.simplified.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.transcriptome.peaks.clustered.simplified.bed").exists())
            // pureclip
            assert !(new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_crosslinks.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_peaks.bed").exists())
        }
    }

    test("only_peakcalling_paraclu") {
        tag "only_peakcalling_paraclu"
        tag "test"
        when {
            params {
                outdir = "$outputDir"
                only_peakcalling = true
                peakcaller = 'paraclu'
            }
        }

        then {
            assert workflow.success

            // clippy
            assert !(new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists())
            // icount
            assert !(new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.sigxls.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.peaks.bed").exists())
            // paraclu
            assert new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.genome.peaks.clustered.simplified.bed").exists()
            assert new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.transcriptome.peaks.clustered.simplified.bed").exists()
            // pureclip
            assert !(new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_crosslinks.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_peaks.bed").exists())
        }
    }

    test("only_peakcalling_paraclu_clippy") {
        tag "only_peakcalling_paraclu_clippy"
        tag "test"
        when {
            params {
                outdir = "$outputDir"
                only_peakcalling = true
                peakcaller = 'paraclu,clippy'
            }
        }

        then {
            assert workflow.success

            // clippy
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists()
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.genome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists()
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Peaks.bed").exists()
            assert new File("$outputDir/05_peakcalling/clippy/sample_1_R1.transcriptome.peaks_rollmean10_minHeightAdjust1.0_minPromAdjust1.0_minGeneCount5_Summits.bed").exists()
            // icount
            assert !(new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.sigxls.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/icountmini/sample_1_R1.peaks.bed").exists())
            // paraclu
            assert new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.genome.peaks.clustered.simplified.bed").exists()
            assert new File("$outputDir/05_peakcalling/paraclu/sample_1_R1.transcriptome.peaks.clustered.simplified.bed").exists()
            // pureclip
            assert !(new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_crosslinks.bed").exists())
            assert !(new File("$outputDir/05_peakcalling/pureclip/sample_1_R1_pureclip_peaks.bed").exists())
        }
    }
}
